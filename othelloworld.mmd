classDiagram
    GameController --> IBoard : manages
    GameController --> IPlayer : manages
    GameController --> IPiece : manages placement
    GameController --> IDisplay
    GameState -- GameController
    Board *-- Piece : contains
    Board --> Position : uses
    Player --> Piece : owns
    Piece -- PieceColor
    IDisplay <|-- Display
    IBoard <|-- Board
    IPlayer <|-- Player
    IPiece <|-- Piece
    GameManager --> GameController

    class Display {
        + DisplayBoard(Board board, List~Position~ validMoves): void
        + DisplayMessage(string message): void
        + AskNonNullInput( ): void
    }

    class GameManager {
        - GameController _gameController
        + GameManager(Board board, Display display)
        + Play( ): void
    }
    note for GameManager "GameController instantiated in GameManager constructor.
    GameManager.Play() calls GameController.Play().
    For further expansion, this can have options like:
    NewGame(), RestartGame(), SaveGame(), Exit()"

    class GameController {
        - IBoard _board
        - IPlayer[] _players
        - int _currentPlayer
        - GameState _gameState
        - IDisplay _display
        + Action SwitchTurn
        + Func~int row, int col~ IsInsideBoard: bool
        + GameController(IBoard board, IDisplay display)
        + Play(): void
        + PlacePiece(int row, int col, IPlayer player): bool
        + GetFlippablePieces(int row, int col, IPlayer player): List~Position~
        + IsValidMove(int row, int col, IPlayer player): bool
        + GetValidMoves(IPlayer player): List~Position~
        + TryParseMove(string input, out int row, out int col): bool
        + GetScoreCounts( ): (int blackCount, int whiteCount)
    }

    class Board {
        - int _size
        - Piece?[,] _grid
        + Board(int size = 8)
        - InitBoard(): void
        + GetBoard(): Piece?[,]
    }

    class Piece {
        + PieceColor Color
        + Action Flip
        + Piece(PieceColor color)
    }

    class Player {
        + PieceColor Color
        + int Score
        + Player(PieceColor color)
    }

    class Position {
        <<struct>>
        int Row
        int Col
        Position(int row, int col)
    }

    class PieceColor {
        <<enum>>
        Black
        White
    }

    class GameState {
        <<enum>>
        Playing
        Finished
    }

    class IDisplay {
        <<Interface>>
        + DisplayBoard(Board, List~Position~)
        + DisplayMessage(string)
        + AskNonNullInput()
    }

    class IBoard {
        <<Interface>>
        + GetBoard(): IPiece?[,]
    }

    class IPiece {
        <<Interface>>
        + PieceColor Color
        + Action Flip
    }

    class IPlayer {
        <<Interface>>
        + PieceColor Color
        + int Score
    }